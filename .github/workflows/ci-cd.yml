name: pipeline

on: push
    
jobs:
  test-suite:
    runs-on: ubuntu-latest

    services: # adding postgres to flow file for testing
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 2
        ports:
          # Maps tcp port 5432 on service to host
          - 5432:5432
  
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup python v3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ -f rest_api/src/requirements.txt ]]; then pip install -r rest_api/src/requirements.txt; fi
          
      - name: run unittest
        run: python -m unittest discover rest_api/src/
        env:
          FLASK_APP: main.py
          FLASK_ENV: testing
          JWT_SECRET_KEY: ercret
          DB_URI: postgres:postgres@localhost:5432
          HOSTNAME: localhost:5000

  s3-deployment:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        working-directory: ./react_app # change working directory to the react_app
        run: yarn # initializes yarn

      - name: Build
        working-directory: ./react_app # change working directory to the react_app
        env:
          REACT_APP_HOST: ${{ secrets.REACT_APP_HOST }}
          REACT_APP_DOMAIN: ${{ secrets.REACT_APP_DOMAIN }}
        run: CI=false yarn build # builds the react app

      - name: Deploy
        uses: reggionick/s3-deploy@v3
        with:
          folder: ./react_app/build
          bucket: ${{ secrets.S3_BUCKET }}
          bucket-region: ${{ secrets.S3_BUCKET_REGION }}
          dist-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: / # need to invalidate cloudfront root so that cache is updated
          delete-removed: true # will delete any files on s3 that aren't present in build
          private: true
        